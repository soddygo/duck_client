---
name: CLI-UI Build

on:
  push:
    branches: [main]
    paths:
      - 'cli-ui/**'
      - 'client-core/**'
      - '.github/workflows/cli-ui-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'cli-ui/**'
      - 'client-core/**'
      - '.github/workflows/cli-ui-build.yml'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes detected'
        required: false
        default: false
        type: boolean

# 添加必要的权限配置
permissions:
  contents: read
  actions: read

env:
  CARGO_TERM_COLOR: always
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  # 快速检查任务
  check:
    name: Pre-build Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust code
        run: |
          cd cli-ui/src-tauri
          cargo check

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cli-ui/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd cli-ui
          npm ci

      - name: Check TypeScript
        run: |
          cd cli-ui
          npm run build

  # 跨平台构建任务
  build:
    name: Build CLI-UI for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux-x86_64
            os: ubuntu-22.04
            rust_target: x86_64-unknown-linux-gnu
            arch: x64
            build_args: ""

          - name: Linux-aarch64
            os: ubuntu-22.04
            rust_target: aarch64-unknown-linux-gnu
            arch: arm64
            build_args: ""

          - name: Windows-x86_64
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            arch: x64
            build_args: ""

          - name: Windows-aarch64
            os: windows-latest
            rust_target: aarch64-pc-windows-msvc
            arch: arm64
            build_args: ""

          - name: macOS-x86_64
            os: macos-latest
            rust_target: x86_64-apple-darwin
            arch: x64
            build_args: ""

          - name: macOS-aarch64
            os: macos-latest
            rust_target: aarch64-apple-darwin
            arch: arm64
            build_args: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 平台特定系统依赖安装
      - name: Install Linux dependencies for Tauri
        if: startsWith(matrix.platform.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            libglib2.0-dev \
            libgobject-2.0-dev \
            libgio-2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.0-dev \
            pkg-config \
            build-essential

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cli-ui/package-lock.json

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.platform.rust_target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: cli-ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('cli-ui/package-lock.json') }}

      - name: Install frontend dependencies
        run: |
          cd cli-ui
          npm ci

      - name: Build duck-cli binary
        run: |
          # 只构建 duck-cli 模块，避免其他模块的依赖问题
          cargo build --release --target ${{ matrix.platform.rust_target }} -p duck-cli
        shell: bash

      - name: Copy duck-cli binary to cli-ui (Tauri sidecar naming)
        run: |
          # 创建目标目录
          mkdir -p cli-ui/src-tauri/binaries
          
          # 使用 Tauri 自动命名约定：binaries/duck-cli-$TARGET_TRIPLE
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            # Windows 平台 (.exe 扩展名)
            cp target/${{ matrix.platform.rust_target }}/release/duck-cli.exe \
               cli-ui/src-tauri/binaries/duck-cli-${{ matrix.platform.rust_target }}.exe
          else
            # macOS 和 Linux 平台 (无扩展名)
            cp target/${{ matrix.platform.rust_target }}/release/duck-cli \
               cli-ui/src-tauri/binaries/duck-cli-${{ matrix.platform.rust_target }}
          fi
        shell: bash

      - name: Setup cross-compilation for Linux ARM64
        if: matrix.platform.rust_target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Verify duck-cli binary
        run: |
          echo "=== 验证 duck-cli 二进制文件 ==="
          find cli-ui/src-tauri/binaries -name "duck-cli*" -type f | head -10
          echo "=== 二进制文件列表 ==="
          ls -la cli-ui/src-tauri/binaries/
        shell: bash

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          projectPath: cli-ui
          args: --target ${{ matrix.platform.rust_target }} ${{ matrix.platform.build_args }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-ui-${{ matrix.platform.name }}
          path: |
            cli-ui/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/
          retention-days: 30

  # macOS 通用二进制构建（可选）
  build-macos-universal:
    name: Build macOS Universal Binary
    runs-on: macos-latest
    needs: build
    if: ${{ always() && (needs.build.result == 'success') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            x86_64-apple-darwin
            aarch64-apple-darwin

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cli-ui/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd cli-ui
          npm ci

      - name: Build duck-cli for macOS Universal
        run: |
          # 构建 x86_64 版本
          cargo build --release --target x86_64-apple-darwin -p duck-cli
          
          # 构建 aarch64 版本
          cargo build --release --target aarch64-apple-darwin -p duck-cli
          
          # 创建通用二进制文件（使用 Tauri 命名约定）
          mkdir -p cli-ui/src-tauri/binaries
          lipo -create \
            target/x86_64-apple-darwin/release/duck-cli \
            target/aarch64-apple-darwin/release/duck-cli \
            -output cli-ui/src-tauri/binaries/duck-cli-universal-apple-darwin

      - name: Build universal macOS app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          projectPath: cli-ui
          args: --target universal-apple-darwin

      - name: Upload universal macOS build
        uses: actions/upload-artifact@v4
        with:
          name: cli-ui-macOS-universal
          path: |
            cli-ui/src-tauri/target/universal-apple-darwin/release/bundle/
          retention-days: 30

  # 构建摘要
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check, build, build-macos-universal]
    if: ${{ always() }}
    steps:
      - name: Generate build summary
        run: |
          echo "## CLI-UI Build Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-build checks: ${{ needs.check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-platform build: ${{ needs.build.result == 'success' && '✅ Completed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- macOS Universal build: ${{ needs.build-macos-universal.result == 'success' && '✅ Completed' || needs.build-macos-universal.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Supported Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 Linux (x86_64, ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 Windows (x86_64, ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS (x86_64, ARM64, Universal)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Built applications can be found in the **Artifacts** section of this workflow run." >> $GITHUB_STEP_SUMMARY

          # 如果构建失败，添加故障排除信息
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check that all duck-cli binaries were downloaded correctly" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Tauri configuration is valid" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure all system dependencies are installed" >> $GITHUB_STEP_SUMMARY
            echo "- Check for Rust compilation errors" >> $GITHUB_STEP_SUMMARY
          fi 