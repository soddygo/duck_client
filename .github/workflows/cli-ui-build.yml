---
name: CLI-UI Build

on:
  push:
    branches: [main]
    paths:
      - 'cli-ui/**'
      - 'client-core/**'
      - '.github/workflows/cli-ui-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'cli-ui/**'
      - 'client-core/**'
      - '.github/workflows/cli-ui-build.yml'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no changes detected'
        required: false
        default: false
        type: boolean

# 添加必要的权限配置
permissions:
  contents: read
  actions: read

env:
  CARGO_TERM_COLOR: always
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  # 快速检查任务
  check:
    name: Pre-build Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Linux dependencies for Rust check
        run: |
          echo "=== 更新 apt 源 ==="
          sudo apt-get update
          
          echo "=== 安装基础开发工具 ==="
          sudo apt-get install -y \
            curl \
            wget \
            file \
            build-essential \
            libc6-dev \
            m4 \
            pkg-config
          
          echo "=== 安装 GLib 和相关系统库 ==="
          sudo apt-get install -y \
            libglib2.0-dev \
            libglib2.0-0 \
            libglib2.0-data \
            libglib2.0-bin \
            glib-networking \
            glib-networking-common \
            glib-networking-services >/dev/null 2>&1
          
          echo "=== 安装其他必要的系统依赖 ==="
          sudo apt-get install -y libssl-dev >/dev/null 2>&1
          sudo apt-get install -y libgtk-3-dev >/dev/null 2>&1
          
          # 尝试安装 WebKit，如果失败则使用备用方案
          echo "=== 安装 WebKit 开发包 ==="
          if ! sudo apt-get install -y libwebkit2gtk-4.0-dev >/dev/null 2>&1; then
            echo "⚠️  尝试备用 WebKit 包"
            sudo apt-get install -y libwebkit2gtk-4.1-dev >/dev/null 2>&1 || echo "❌ WebKit 安装失败，继续..."
          fi
          
          # 安装 libsoup-3.0 (Tauri 2.0 需要)
          echo "=== 安装 libsoup-3.0 ==="
          if sudo apt-get install -y libsoup-3.0-dev; then
            echo "✅ libsoup-3.0-dev 安装成功"
          else
            echo "⚠️ libsoup-3.0-dev 安装失败，尝试备用方案"
            sudo apt-get install -y libsoup2.4-dev || echo "❌ libsoup 安装失败"
          fi
          
          sudo apt-get install -y \
            librsvg2-dev \
            patchelf
          
          # 处理应用指示器依赖冲突
          echo "=== 安装应用指示器依赖 ==="
          if sudo apt-get install -y libayatana-appindicator3-dev; then
            echo "✅ 使用 Ayatana 应用指示器"
          else
            echo "⚠️  Ayatana 安装失败，尝试传统版本"
            sudo apt-get remove -y libayatana-appindicator3-dev 2>/dev/null || true
            sudo apt-get install -y libappindicator3-dev || echo "❌ 应用指示器安装失败"
          fi
          
          # 强制更新库缓存
          sudo ldconfig
          
          # 设置 PKG_CONFIG_PATH
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig"
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          
          # 验证关键依赖
          echo "=== 检查阶段 GLib 验证 ==="
          pkg-config --exists glib-2.0 && echo "✅ glib-2.0 found" || echo "❌ glib-2.0 not found"
          pkg-config --exists gobject-2.0 && echo "✅ gobject-2.0 found" || echo "❌ gobject-2.0 not found"
          pkg-config --exists gio-2.0 && echo "✅ gio-2.0 found" || echo "❌ gio-2.0 not found"
          
          # 验证 Tauri 2.0 关键依赖
          echo "=== Tauri 2.0 关键依赖验证 ==="
          pkg-config --exists libsoup-3.0 && echo "✅ libsoup-3.0 found" || echo "❌ libsoup-3.0 not found"
          pkg-config --exists webkit2gtk-4.1 && echo "✅ webkit2gtk-4.1 found" || echo "❌ webkit2gtk-4.1 not found"
          pkg-config --exists webkit2gtk-4.0 && echo "✅ webkit2gtk-4.0 found" || echo "❌ webkit2gtk-4.0 not found"
          pkg-config --exists javascriptcoregtk-4.1 && echo "✅ javascriptcoregtk-4.1 found" || echo "❌ javascriptcoregtk-4.1 not found"
          pkg-config --exists javascriptcoregtk-4.0 && echo "✅ javascriptcoregtk-4.0 found" || echo "❌ javascriptcoregtk-4.0 not found"
          
          # 显示版本信息
          echo "=== 依赖版本信息 ==="
          pkg-config --modversion glib-2.0 gobject-2.0 gio-2.0 2>/dev/null || echo "❌ version check failed"
          pkg-config --modversion libsoup-3.0 2>/dev/null || echo "⚠️ libsoup-3.0 version check failed"
          pkg-config --modversion javascriptcoregtk-4.1 2>/dev/null || echo "⚠️ javascriptcoregtk-4.1 version check failed"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust code
        run: |
          cd cli-ui/src-tauri
          cargo check
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cli-ui/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd cli-ui
          npm ci

      - name: Check TypeScript
        run: |
          cd cli-ui
          npm run build

  # 跨平台构建任务
  build:
    name: Build CLI-UI for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux-x86_64
            os: ubuntu-22.04
            rust_target: x86_64-unknown-linux-gnu
            arch: x64
            build_args: ""

          # 暂时禁用 ARM64 构建，因为 GitHub Actions 交叉编译环境存在问题
          # - name: Linux-aarch64
          #   os: ubuntu-22.04
          #   rust_target: aarch64-unknown-linux-gnu
          #   arch: arm64
          #   build_args: ""

          - name: Windows-x86_64
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            arch: x64
            build_args: ""

          # 暂时禁用 Windows ARM64 构建
          # - name: Windows-aarch64
          #   os: windows-latest
          #   rust_target: aarch64-pc-windows-msvc
          #   arch: arm64
          #   build_args: ""

          - name: macOS-x86_64
            os: macos-latest
            rust_target: x86_64-apple-darwin
            arch: x64
            build_args: ""

          - name: macOS-aarch64
            os: macos-latest
            rust_target: aarch64-apple-darwin
            arch: arm64
            build_args: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 平台特定系统依赖安装
      - name: Install Linux dependencies for Tauri 2.0
        if: startsWith(matrix.platform.os, 'ubuntu')
        run: |
          echo "=== 更新包列表 ==="
          # 添加重试机制处理网络问题
          for i in {1..3}; do
            echo "尝试 $i/3 次更新包列表..."
            if sudo apt-get update >/dev/null 2>&1; then
              echo "✅ 包列表更新成功"
              break
            else
              echo "⚠️  包列表更新失败，等待重试..."
              sleep 5
              if [ $i -eq 3 ]; then
                echo "❌ 包列表更新最终失败，使用现有缓存继续"
              fi
            fi
          done
          
          # 先安装基础开发工具
          echo "=== 安装基础开发工具 ==="
          sudo apt-get install -y \
            curl \
            wget \
            file \
            build-essential \
            libc6-dev \
            m4 \
            pkg-config >/dev/null 2>&1
          
          # ARM64 构建已暂时禁用
          # if [[ "${{ matrix.platform.rust_target }}" == "aarch64-unknown-linux-gnu" ]]; then
          #   echo "=== 设置 ARM64 多架构支持 ==="
          #   sudo dpkg --add-architecture arm64
          #   sudo apt-get update >/dev/null 2>&1
          # fi
          
          # 安装 GLib 和相关系统库 (完整包含所有必需的 dev 包)
          # 注意：gobject-2.0 和 gio-2.0 功能都包含在 libglib2.0-dev 中
          sudo apt-get install -y \
            libglib2.0-dev \
            libglib2.0-0 \
            libglib2.0-data \
            libglib2.0-bin \
            glib-networking \
            glib-networking-common \
            glib-networking-services
          
          # 强制更新 pkg-config 缓存
          sudo ldconfig
          
          # 设置 PKG_CONFIG_PATH 环境变量 (对于 x86_64)
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig"
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          
          # 验证主要依赖
          echo "=== 验证 Tauri 2.0 依赖 ==="
          pkg-config --exists glib-2.0 && echo "✅ glib-2.0 found" || echo "❌ glib-2.0 not found"
          pkg-config --exists libsoup-3.0 && echo "✅ libsoup-3.0 found" || echo "❌ libsoup-3.0 not found"
          pkg-config --exists javascriptcoregtk-4.1 && echo "✅ javascriptcoregtk-4.1 found" || echo "❌ javascriptcoregtk-4.1 not found"
          
          # 安装完整的 Tauri 依赖
          echo "=== 安装核心 Tauri 依赖 ==="
          sudo apt-get install -y \
            libssl-dev \
            libgtk-3-dev \
            librsvg2-dev \
            patchelf
          
          # 处理应用指示器依赖冲突
          echo "=== 安装应用指示器依赖 ==="
          if sudo apt-get install -y libayatana-appindicator3-dev >/dev/null 2>&1; then
            echo "✅ 使用 Ayatana 应用指示器"
          else
            echo "⚠️  Ayatana 安装失败，尝试传统版本"
            sudo apt-get remove -y libayatana-appindicator3-dev >/dev/null 2>&1 || true
            sudo apt-get install -y libappindicator3-dev >/dev/null 2>&1 || echo "❌ 应用指示器安装失败"
          fi
          
          echo "=== 尝试安装 WebKit 开发包 ==="
          # 尝试安装 WebKit 依赖，支持多个版本的备用方案
          if sudo apt-get install -y libwebkit2gtk-4.1-dev; then
            echo "✅ libwebkit2gtk-4.1-dev 安装成功"
          elif sudo apt-get install -y libwebkit2gtk-4.0-dev; then
            echo "✅ libwebkit2gtk-4.0-dev 安装成功 (备用方案)"
          else
            echo "❌ WebKit 开发包安装失败，尝试继续..."
          fi
          
          echo "=== 安装 JavaScriptCore GTK ==="
          # 安装 JavaScriptCore GTK (Tauri 2.0 需要 4.1 版本)
          if sudo apt-get install -y libjavascriptcoregtk-4.1-dev; then
            echo "✅ libjavascriptcoregtk-4.1-dev 安装成功"
          else
            echo "⚠️ libjavascriptcoregtk-4.1-dev 安装失败，尝试备用版本"
            sudo apt-get install -y libjavascriptcoregtk-4.0-dev || echo "❌ JavaScriptCore 安装失败"
          fi
          
          echo "=== 安装其他图形和媒体库 ==="
          sudo apt-get install -y \
            libxdo-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev >/dev/null 2>&1 || echo "⚠️ 部分图形库安装失败"
          
          # 安装 libsoup-3.0 (Tauri 2.0 需要)
          echo "=== 安装 libsoup-3.0 ==="
          if sudo apt-get install -y libsoup-3.0-dev >/dev/null 2>&1; then
            echo "✅ libsoup-3.0-dev 安装成功"
          else
            echo "⚠️ libsoup-3.0-dev 安装失败，尝试备用方案"
            sudo apt-get install -y libsoup2.4-dev >/dev/null 2>&1 || echo "❌ libsoup 安装失败"
          fi
          
          sudo apt-get install -y \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libgif-dev >/dev/null 2>&1 || echo "⚠️ 部分图像库安装失败"
          
          sudo apt-get install -y \
            libx11-dev \
            libxext-dev \
            libxft-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxrender-dev \
            libxfixes-dev \
            libxrandr-dev \
            libxss-dev \
            libxss1 >/dev/null 2>&1 || echo "⚠️ 部分X11库安装失败"
          
          sudo apt-get install -y \
            libgconf-2-4 >/dev/null 2>&1 || echo "⚠️ GConf库安装失败，但不影响构建"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cli-ui/package-lock.json

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.platform.rust_target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: cli-ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('cli-ui/package-lock.json') }}

      - name: Install frontend dependencies
        run: |
          cd cli-ui
          npm ci

      # ARM64 交叉编译步骤已禁用
      # - name: Setup cross-compilation for Linux ARM64
      #   if: matrix.platform.rust_target == 'aarch64-unknown-linux-gnu'
      #   run: |
      #     echo "ARM64 构建已暂时禁用"

      - name: Build duck-cli binary
        run: |
          # 设置环境变量 (针对Linux)
          if [[ "${{ matrix.platform.os }}" == "ubuntu-22.04" ]]; then
            export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig"
            export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
            export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1
            
            echo "=== 验证关键依赖 ==="
            pkg-config --exists glib-2.0 && echo "✅ glib-2.0 available" || echo "❌ glib-2.0 not found"
            pkg-config --exists libsoup-3.0 && echo "✅ libsoup-3.0 available" || echo "❌ libsoup-3.0 not found"
            pkg-config --exists javascriptcoregtk-4.1 && echo "✅ javascriptcoregtk-4.1 available" || echo "❌ javascriptcoregtk-4.1 not found"
          fi
          
          # 构建 duck-cli 模块
          echo "=== 构建 duck-cli 二进制文件 ==="
          cargo build --release --target ${{ matrix.platform.rust_target }} -p duck-cli
        shell: bash

      - name: Copy duck-cli binary to cli-ui (Tauri sidecar naming)
        run: |
          # 创建目标目录
          mkdir -p cli-ui/src-tauri/binaries
          
          # 使用 Tauri 自动命名约定：binaries/duck-cli-$TARGET_TRIPLE
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            # Windows 平台 (.exe 扩展名)
            cp target/${{ matrix.platform.rust_target }}/release/duck-cli.exe \
               cli-ui/src-tauri/binaries/duck-cli-${{ matrix.platform.rust_target }}.exe
          else
            # macOS 和 Linux 平台 (无扩展名)
            cp target/${{ matrix.platform.rust_target }}/release/duck-cli \
               cli-ui/src-tauri/binaries/duck-cli-${{ matrix.platform.rust_target }}
          fi
        shell: bash

      - name: Verify duck-cli binary
        run: |
          echo "=== 验证 duck-cli 二进制文件 ==="
          ls -la cli-ui/src-tauri/binaries/
          
          echo "=== 测试 duck-cli 功能 ==="
          # 测试版本信息
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            ./cli-ui/src-tauri/binaries/duck-cli-${{ matrix.platform.rust_target }}.exe --version || echo "⚠️ 版本检查失败"
          else
            ./cli-ui/src-tauri/binaries/duck-cli-${{ matrix.platform.rust_target }} --version || echo "⚠️ 版本检查失败"
          fi
        shell: bash

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # 根据目标架构设置正确的 PKG_CONFIG_PATH
          PKG_CONFIG_PATH: ${{ matrix.platform.rust_target == 'x86_64-unknown-linux-gnu' && '/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig' || '' }}
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
        with:
          projectPath: cli-ui
          args: --target ${{ matrix.platform.rust_target }} ${{ matrix.platform.build_args }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-ui-${{ matrix.platform.name }}
          path: |
            cli-ui/src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/
          retention-days: 30

  # 构建摘要
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check, build]
    if: ${{ always() }}
    steps:
      - name: Generate build summary
        run: |
          echo "## CLI-UI Build Summary 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-build checks: ${{ needs.check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-platform build: ${{ needs.build.result == 'success' && '✅ Completed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Supported Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 Linux (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 Windows (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS (aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Temporarily Disabled" >> $GITHUB_STEP_SUMMARY
          echo "- ARM64 builds (Linux, Windows) - 交叉编译环境问题" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Built applications can be found in the **Artifacts** section of this workflow run." >> $GITHUB_STEP_SUMMARY

          # 如果构建失败，添加故障排除信息
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check that all duck-cli binaries were downloaded correctly" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Tauri configuration is valid" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure all system dependencies are installed" >> $GITHUB_STEP_SUMMARY
            echo "- Check for Rust compilation errors" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 ARM64 Network Issues" >> $GITHUB_STEP_SUMMARY
            echo "如果遇到 ARM64 包下载 404 错误：" >> $GITHUB_STEP_SUMMARY
            echo "- 这通常是 Ubuntu 安全服务器的临时问题" >> $GITHUB_STEP_SUMMARY
            echo "- 构建系统已配置为自动回退到主机架构" >> $GITHUB_STEP_SUMMARY
            echo "- 可以稍后重试构建，或者暂时禁用 ARM64 构建" >> $GITHUB_STEP_SUMMARY
            echo "- 生成的二进制文件仍可在 ARM64 系统上运行（通过仿真）" >> $GITHUB_STEP_SUMMARY
          fi 